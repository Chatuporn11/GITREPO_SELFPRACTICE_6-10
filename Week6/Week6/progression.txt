1. เข้าใจว่า ฟังก์ชันก็เป็นค่าชนิดหนึ่ง (First-class citizen)
→ สามารถ return หรือส่งเป็นพารามิเตอร์ได้
a() คืนค่าเป็นฟังก์ชัน sum เอง
b() พยายามเรียก sum(1,5) แต่ฟังก์ชัน sum ไม่มีพารามิเตอร์ จึง error ได้
c(sum) คืนค่าฟังก์ชัน sum เช่นกัน

2. calculate() เป็นฟังก์ชันที่ รับฟังก์ชันอื่น เข้ามาทำงานแทนเรา
ทำให้โค้ดยืดหยุ่น ไม่ต้องเขียนซ้ำหลายบรรทัด

3. ตัวแปร a มี 3 ชั้น: global → local → inner
Scope กำหนดว่าตัวแปรมองเห็นได้ที่ไหน
echo() เข้าถึงตัวแปรของ doSomething() ได้

4. doSomething("guest") → คืนค่าเป็นฟังก์ชัน echo
( ) ด้านหลังอีกชุดคือการ เรียกใช้ฟังก์ชันที่คืนกลับมา

5. makeAdder(5) สร้างฟังก์ชันที่จำค่า x = 5 ไว้ใน memory
แม้ makeAdder จะจบการทำงานแล้ว แต่ฟังก์ชัน add ยังเข้าถึง x ได้อยู่

6. id เป็นตัวแปร private ของ closure
ทุกครั้งที่เรียก idGen() ค่าจะเพิ่มขึ้น แต่ไม่รีเซ็ต

7. เป็นแนวเดียวกับ makeAdder
Closure ทำให้แต่ละตัว (addFive, addTen) จำค่า x ของตัวเองได้